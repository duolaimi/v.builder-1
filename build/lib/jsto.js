// Generated by CoffeeScript 1.9.1

/*
 * js生产文件构建类
 */
var _, _uglify, amdeps, butil, color, config, errrHandler, flctl, fs, gulp, gutil, header, info, jsDepBuilder, jsToDev, jsToDist, objMixin, path, pkg, plumber, revall, rjs, uglify,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require('fs');

path = require('path');

config = require('../config');

amdeps = require('./amdeps');

flctl = require('./flctl');

_ = require('lodash');

gulp = require('gulp');

revall = require('gulp-rev-all');

uglify = require('uglify-js');

_uglify = require('gulp-uglify');

header = require('gulp-header');

pkg = require('../package.json');

info = '/* <%= pkg.name %>@v<%= pkg.version %>, @description <%= pkg.description %>, @author <%= pkg.author.name %>, @blog <%= pkg.author.url %> */\n';

rjs = require('gulp-requirejs');

plumber = require('gulp-plumber');

gutil = require('gulp-util');

color = gutil.colors;


/* 构建AMD模块依赖表的基类 */

jsDepBuilder = amdeps.bder;

butil = require('./butil');

errrHandler = butil.errrHandler;

objMixin = butil.objMixin;


/*
 * 合并AMD模块到debug目录的继承类
 */

jsToDev = (function(superClass) {
  extend(jsToDev, superClass);

  function jsToDev() {
    this.init = bind(this.init, this);
    this.modulesToDev = bind(this.modulesToDev, this);
    this.oneModule = bind(this.oneModule, this);
    this.indexModule = bind(this.indexModule, this);
    this.coreModule = bind(this.coreModule, this);
    this.rjsBuilder = bind(this.rjsBuilder, this);
    return jsToDev.__super__.constructor.apply(this, arguments);
  }

  jsToDev.prototype.prefix = config.prefix;

  jsToDev.prototype.outPath = config.jsOutPath;

  jsToDev.prototype.distPath = config.jsDistPath;

  jsToDev.prototype.libsPath = config.jsLibPath;

  jsToDev.prototype.configStr = "window['" + config.configName + "'] = " + (JSON.stringify(config.configDate, null, 2));


  /* AMD模块加载JS与第三方JS合并成核心JS库 */

  jsToDev.prototype.rjsBuilder = function(modules, cb) {
    var _baseUrl, _cb, _destPath, _include, _name, _outName, _paths, _rjs, _shim, ref;
    _cb = cb || function() {};
    _baseUrl = this.srcPath;
    _destPath = this.outPath;
    _name = 'almond';
    _include = _.union(['jquery', 'smcore'].concat(modules));
    if (ref = config.indexModuleName, indexOf.call(_include, ref) < 0) {
      _outName = config.coreJsName;
    } else {
      _outName = config.indexJsDistName;
    }
    _paths = JSON.parse(fs.readFileSync(path.join(config.dataPath, 'jslib.paths.json'), 'utf8'));
    _shim = JSON.parse(fs.readFileSync(path.join(config.dataPath, 'shim.json'), 'utf8'));
    _rjs = rjs({
      baseUrl: _baseUrl,
      paths: _paths,
      name: _name,
      include: _include,
      out: _outName + '.js',
      shim: _shim
    });
    return _rjs.on('data', function(output) {
      var _outPath, _soure;
      _soure = String(output.contents);
      _outPath = _destPath + _outName + '.js';
      fs.writeFileSync(_outPath, _soure, 'utf8');
      return _cb();
    });
  };


  /* 合并所有第三方lib模块 */

  jsToDev.prototype.coreModule = function(cb) {
    var _cb, _depLibs, _makeDeps, _modules;
    _cb = cb || function() {};
    _makeDeps = this.makeDeps();
    _depLibs = _makeDeps.depLibs;
    _modules = ['jquery'].concat(_depLibs);
    return this.rjsBuilder(_modules, function() {
      return _cb();
    });
  };


  /* 合并首页模块 */

  jsToDev.prototype.indexModule = function(cb) {
    var _cb, _index_moduleDeps, _index_module_name, _modules;
    _cb = cb || function() {};
    _index_module_name = config.indexModuleName;
    _index_moduleDeps = this.makeDeps().allDeps[_index_module_name];
    _modules = _index_moduleDeps.libList.concat(_index_moduleDeps.modList);
    _modules.push(_index_module_name);
    return this.rjsBuilder(_modules, function() {
      return _cb();
    });
  };


  /* 合并单个模块 */

  jsToDev.prototype.oneModule = function(name, cb) {
    var _cb, _devName, _devPath, _jsData, _jsFile, _moduleDeps, _module_name, _module_path, _num, _out_path, _source, _this_js, error, f, i, len, source;
    _cb = cb || function() {};
    _module_name = name;
    if (_module_name.indexOf("_") === 0) {
      return _cb();
    }
    _num = 0;
    if (_module_name.indexOf("/") === -1 || _module_name.indexOf('.') === 0) {
      gutil.log(_module_name + "not an AMD module");
      return _cb();
    }
    if (_module_name === config.indexModuleName) {
      return this.indexModule(function() {
        return gutil.log(color.cyan(config.indexJsDistName + '.js'), "build success");
      });
    } else {
      _jsData = [];
      _module_path = this.srcPath;
      _out_path = this.outPath;
      _moduleDeps = this.makeDeps().allDeps[_module_name].modList;
      _this_js = path.join(_module_path, _module_name + '.js');
      _devName = this.prefix + _module_name.replace(/\//g, '_') + '.js';
      _devPath = this.outPath + _devName;
      for (i = 0, len = _moduleDeps.length; i < len; i++) {
        f = _moduleDeps[i];
        _jsFile = path.join(_module_path, f + '.js');
        if (fs.statSync(_jsFile).isFile()) {
          _source = fs.readFileSync(_jsFile, 'utf8');
          _jsData.push(_source + ';');
        }
      }
      _jsData.push(fs.readFileSync(_this_js, 'utf8') + ';');
      try {
        source = _jsData.join('');
        fs.writeFileSync(_devPath, source, 'utf8');
        _num++;
        return _cb();
      } catch (_error) {
        error = _error;
        gutil.log("Error: " + _devName);
        return gutil.log(error);
      }
    }
  };


  /* 合并js模块 */

  jsToDev.prototype.modulesToDev = function(cb) {
    var _allDeps, _cb, _depList, _devName, _devPath, _jsData, _jsFile, _modList, _num, _source, _srcPath, _this_js, deps, error, f, i, len, module, source;
    _cb = cb || function() {};
    _srcPath = this.srcPath;
    _allDeps = this.makeDeps().allDeps;
    _depList = _allDeps.modList;
    _num = 0;
    gutil.log(color.yellow("Combine javascript modules! Waitting..."));
    for (module in _allDeps) {
      deps = _allDeps[module];
      if (module.indexOf("_") !== 0) {
        _this_js = path.join(_srcPath, module + '.js');
        _devName = this.prefix + module.replace(/\//g, '_') + '.js';
        _devPath = this.outPath + _devName;
        _jsData = [];
        _modList = deps.modList;
        for (i = 0, len = _modList.length; i < len; i++) {
          f = _modList[i];
          _jsFile = path.join(_srcPath, f + '.js');
          if (fs.statSync(_jsFile).isFile() && f.indexOf('.') !== 0) {
            _source = fs.readFileSync(_jsFile, 'utf8');
            _jsData.push(_source + ';');
          }
        }
        _jsData.push(fs.readFileSync(_this_js, 'utf8') + ';');
        if (_num % 10 === 0 && _num > 1) {
          gutil.log("Waitting...");
        }
        try {
          source = _jsData.join('');
          fs.writeFileSync(_devPath, source, 'utf8');
          _num++;
        } catch (_error) {
          error = _error;
          gutil.log("Error: " + _devName);
          gutil.log(error);
        }
      }
    }
    return _cb(_num);
  };

  jsToDev.prototype.init = function(cb) {
    var _cb, _coreModule, _indexModule, _modulesToDev;
    _cb = cb || function() {};
    _modulesToDev = this.modulesToDev;
    _coreModule = this.coreModule;
    _indexModule = this.indexModule;
    return _modulesToDev(function(num) {
      gutil.log(color.cyan(num), "javascript modules combined!");
      return _coreModule(function() {
        gutil.log('\'' + color.cyan("" + config.coreJsName) + '\'', "combined!");
        return _indexModule(function() {
          gutil.log('\'' + color.cyan("" + config.indexJsDistName) + '\'', "combined!");
          gutil.log(color.green("All javascript combined!"));
          return _cb();
        });
      });
    });
  };

  return jsToDev;

})(jsDepBuilder);


/*
 * js生产文件的构建类
 */

jsToDist = (function() {
  function jsToDist() {
    this.push = bind(this.push, this);
    this.updateMap = bind(this.updateMap, this);
    this.isChange = bind(this.isChange, this);
    this.jsDistList = bind(this.jsDistList, this);
  }

  jsToDist.prototype.jsPath = config.jsOutPath;

  jsToDist.prototype.jsDistPath = config.jsDistPath;

  jsToDist.prototype.mapPath = config.mapPath;

  jsToDist.prototype.getMap = butil.getJSONSync(path.join(config.mapPath, config.jsMapName));

  jsToDist.prototype.getOldMap = butil.getJSONSync(path.join(config.mapPath, "old_" + config.jsMapName));

  jsToDist.prototype.jsDistList = function() {
    var _jsList;
    _jsList = new flctl('.js').getList();
    return _jsList || [];
  };


  /* 判断js是否有改变 */

  jsToDist.prototype.isChange = function(name) {
    var _jsList, _keyName, _map, _valName;
    _valName = name;
    _keyName = name.split('.')[0] + '.js';
    _map = this.getMap;
    _jsList = this.jsDistList();
    return {
      status: !_.has(_map, _keyName) || _map[_keyName].replace('/', '') !== name || indexOf.call(_jsList, name) < 0,
      key: _keyName,
      valule: _map[_keyName] || ""
    };
  };


  /* 更新上一个版本的js Hash表 */

  jsToDist.prototype.updateMap = function(newMap, cb) {
    var _file, _map, _newMap, _oldMap, _str, _temp;
    _map = this.getMap;
    _oldMap = this.getOldMap;
    _temp = objMixin(_map, newMap);
    _newMap = objMixin(_oldMap, _temp);
    _file = path.join(config.mapPath, "old_" + config.jsMapName);
    _str = JSON.stringify(_newMap, null, 2);
    fs.writeFileSync(_file, _str, 'utf8');
    return cb();
  };


  /* 推送js到生产目录 并生成最新的hash map */

  jsToDist.prototype.push = function(cb) {
    var _Map, _cb, _count, _isChange, _jsDistPath, _jsPath, _mapPath, _newMap, _pushJs, _updateMap;
    _cb = cb || function() {};
    _jsPath = this.jsPath;
    _jsDistPath = this.jsDistPath;
    _mapPath = this.mapPath;
    _isChange = this.isChange;
    _updateMap = this.updateMap;
    _count = 0;
    _Map = this.getMap;
    _newMap = {};
    return _pushJs = gulp.src([_jsPath + "*.js"]).pipe(plumber({
      errorHandler: errrHandler
    })).pipe(_uglify()).pipe(header(info, {
      pkg: pkg
    })).pipe(revall({
      hashLength: config.hashLength,
      silent: true
    })).pipe(gulp.dest(_jsDistPath)).on('data', function(output) {
      var _name, _soure, result;
      _soure = String(output.contents);
      _name = path.basename(output.path);
      if (_count % 10 === 0) {
        gutil.log("Waitting...");
      }
      result = _isChange(_name);
      if (result.status) {
        gutil.log(_name + " is change!!!");
        _newMap[result.key] = result.valule;
      }
      return _count++;
    }).pipe(revall.manifest({
      fileName: config.jsMapName
    })).pipe(gulp.dest(_mapPath)).on('end', function() {
      return _updateMap(_newMap, function() {
        return _cb();
      });
    });
  };

  return jsToDist;

})();

exports.dev = jsToDev;

exports.dist = jsToDist;
