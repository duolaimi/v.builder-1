// Generated by CoffeeScript 1.9.1

/**
 * 将CSS的debug文件push到生产目录，并将引用到的背景图片自动添加hash后缀
 * @date 2014-12-2 15:10:14
 * @author pjg <iampjg@gmail.com>
 * @link http://pjg.pw
 * @version $Id$
 */
var _, _css2dist, _cssBgDistPath, _cssBgImg, _cssDistPath, _cssMapName, _cssPath, _cssSpImg, _getDistList, _hashLen, _isChange, _mapPath, _pushCss, _pushImg, _spDistPath, _spMapName, _updateMap, butil, config, e, errrHandler, flctl, fs, getMap, getOldMap, getOldSpMap, getSpMap, gulp, gutil, mincss, objMixin, path, plumber, revall,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require('fs');

path = require('path');

_ = require('lodash');

config = require('../config');

gulp = require('gulp');

revall = require('gulp-rev-all');

gutil = require('gulp-util');

mincss = require('gulp-minify-css');

plumber = require('gulp-plumber');

flctl = require('./flctl');

_cssPath = config.cssOutPath;

_cssDistPath = config.cssDistPath;

_cssBgDistPath = config.cssBgDistPath;

_cssMapName = config.cssMapName;

_spMapName = config.spMapName;

_spDistPath = config.spriteDistPath;

_mapPath = config.mapPath;

_hashLen = config.hashLength;

butil = require('./butil');

errrHandler = butil.errrHandler;

objMixin = butil.objMixin;

_cssBgImg = [];

_cssSpImg = [];

_getDistList = function(type) {
  var _list, _type;
  _type = type || '.css';
  _list = new flctl(_type).getList();
  return _list || [];
};

try {
  getMap = JSON.parse(fs.readFileSync(path.join(config.mapPath, _cssMapName), 'utf8'));
  getOldMap = JSON.parse(fs.readFileSync(path.join(config.mapPath, "old_" + _cssMapName), 'utf8'));
  getSpMap = JSON.parse(fs.readFileSync(path.join(config.mapPath, _spMapName), 'utf8'));
  getOldSpMap = JSON.parse(fs.readFileSync(path.join(config.mapPath, "old_" + _spMapName), 'utf8'));
} catch (_error) {
  e = _error;
}


/* 判断css是否有改变 */

_isChange = function(name) {
  var _keyName, _list, _map, _name, _temp, _type;
  _name = name;
  _temp = _name.split('.');
  _type = "." + _temp[2];
  _keyName = _temp[0] + _type;
  _list = _getDistList(_type);
  _map = {};
  if (_type === '.css') {
    _map = getMap || {};
  } else if (_type === '.png') {
    _map = getSpMap || {};
  }
  return {
    status: !_.has(_map, _keyName) || _map[_keyName].replace('/', '') !== _name || indexOf.call(_list, _name) < 0,
    key: _keyName,
    valule: _map[_keyName] || ""
  };
};


/* 更新上一个版本的Hash表 */

_updateMap = function(type, newMap, cb) {
  var _file, _map, _newMap, _oldMap, _temp;
  _oldMap = getOldMap;
  _oldMap = _map = {};
  if (type === '.css') {
    _map = getMap || {};
    _oldMap = getOldMap || {};
    _file = path.join(config.mapPath, "old_" + _cssMapName);
  } else if (type === '.png') {
    _map = getSpMap || {};
    _oldMap = getOldSpMap || {};
    _file = path.join(config.mapPath, "old_" + _spMapName);
  }
  _temp = objMixin(_map, newMap);
  _newMap = objMixin(_oldMap, _temp);
  fs.writeFileSync(_file, JSON.stringify(_newMap, null, 2), 'utf8');
  return cb();
};

_pushImg = function(paths, destPath, done) {
  var _newMap;
  _newMap = {};
  return gulp.src(paths).pipe(plumber({
    errorHandler: errrHandler
  })).pipe(revall({
    hashLength: _hashLen,
    silent: true
  })).pipe(gulp.dest(destPath)).on('data', function(output) {
    var _name, _path, _result;
    _path = output.path;
    _name = path.basename(_path);
    _result = _isChange(_name);
    if (_result.status && _path.indexOf(config.spriteDistPath) !== -1) {
      gutil.log(_name + " is change!!!");
      return _newMap[_result.key] = _result.valule;
    }
  }).pipe(revall.manifest({
    fileName: _spMapName
  })).pipe(gulp.dest(_mapPath)).on('end', function() {
    return done(_newMap);
  });
};

_pushCss = function(done) {
  var _newMap;
  _newMap = {};
  return gulp.src([_cssPath + '*.css']).pipe(plumber({
    errorHandler: errrHandler
  })).pipe(mincss({
    keepBreaks: false,
    compatibility: {
      properties: {
        iePrefixHack: true,
        ieSuffixHack: true
      }
    }
  })).pipe(revall({
    hashLength: _hashLen,
    silent: true,
    transformPath: function(rev, source, src) {
      var _srcPath;
      _srcPath = src.path;
      rev = rev.replace("../_img/", "../../img/");
      if (source.indexOf('../_img/sp/') === 0) {
        _cssSpImg.push(_srcPath);
      } else if (source.indexOf('../_img/bg/') === 0) {
        if (indexOf.call(_cssBgImg, _srcPath) < 0) {
          _cssBgImg.push(_srcPath);
        }
      }
      return rev;
    }
  })).pipe(gulp.dest(_cssDistPath)).on('data', function(output) {
    var _name, _result;
    _name = path.basename(output.path);
    _result = _isChange(_name);
    if (_result.status) {
      gutil.log(_name + " is change!!!");
      return _newMap[_result.key] = _result.valule;
    }
  }).pipe(revall.manifest({
    fileName: _cssMapName
  })).pipe(gulp.dest(_mapPath)).on('end', function() {
    return done(_newMap);
  });
};

_css2dist = function(cb) {
  var _cb;
  _cb = cb || function() {};
  return _pushCss(function(data) {
    console.log(_cssBgImg);
    console.log(_cssSpImg);
    return _updateMap('.css', data, function() {
      return _pushImg(_cssBgImg, _cssBgDistPath, function() {
        gutil.log('CSS bg pushed');
        return _pushImg(_cssSpImg, _spDistPath, function(data) {
          gutil.log('CSS SP_bg pushed');
          return _updateMap('.png', data, function() {
            return _cb();
          });
        });
      });
    });
  });
};

module.exports = _css2dist;
