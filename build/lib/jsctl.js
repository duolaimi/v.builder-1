// Generated by CoffeeScript 1.9.1

/**
 * 将jS的debug文件push到生产目录
 * @date 2014-12-2 15:10:14
 * @author pjg <iampjg@gmail.com>
 * @link http://pjg.pw
 * @version $Id$
 */
var _, _buildJs, _buildJsMap, _hashLen, _isCombo, _jsDistPath, _jsMapName, _jsPath, _mapPath, _stream, butil, color, config, errrHandler, fs, gulp, gutil, header, info, md5, path, pkg, plumber, pushJs, uglify;

fs = require('fs');

path = require('path');

_ = require('lodash');

config = require('../config');

gulp = require('gulp');

gutil = require('gulp-util');

uglify = require('gulp-uglify');

plumber = require('gulp-plumber');

header = require('gulp-header');

pkg = require('../package.json');

info = '/***<%= pkg.name %>@v<%= pkg.version %>, @description <%= pkg.description %>, @author <%= pkg.author.name %>, @blog <%= pkg.author.url %>***/\n';

color = gutil.colors;

_jsPath = config.jsOutPath;

_jsDistPath = config.jsDistPath;

_jsMapName = config.jsMapName;

_mapPath = config.mapPath;

_hashLen = config.hashLength;

_isCombo = config.isCombo;

butil = require('./butil');

errrHandler = butil.errrHandler;

md5 = butil.md5;


/*
 * js 生产文件处理函数
 * @param {string} files 接收一个路径参数，同gulp.src
 * @param {function} cb 处理过程中，处理一个buffer流的回调
 * @param {function} cb2 所有buffer处理完成后的回调函数
 */

_stream = function(files, cb, cb2) {
  return gulp.src([files]).pipe(plumber({
    errorHandler: errrHandler
  })).pipe(uglify()).pipe(header(info, {
    pkg: pkg
  })).on('data', function(source) {
    var _nameObj, _source;
    _nameObj = path.parse(source.path);
    _nameObj.hash = md5(source.contents);
    _source = String(source.contents);
    return cb(_nameObj, _source);
  }).on('end', cb2);
};

_buildJs = function(name, source) {
  butil.mkdirsSync(_jsDistPath);
  return fs.writeFileSync(path.join(_jsDistPath, name), source, 'utf8');
};

_buildJsMap = function(data, cb) {
  var jsonData;
  jsonData = JSON.stringify(data, null, 2);
  butil.mkdirsSync(_mapPath);
  fs.writeFileSync(path.join(_mapPath, _jsMapName), jsonData, 'utf8');
  return cb();
};


/*
 * js生产文件构建函数
 * @param {string} file 同gulp.src接口所接收的参数，默认是js debug目录中的所有js文件
 * @param {function} done 回调函数
 */

pushJs = function(file, done) {
  var _done, _file, _jsMap;
  _jsMap = {};
  gutil.log("Push Js to dist.");
  if (!file) {
    _done = function() {};
    _file = _jsPath + '*.js';
  } else if (typeof file === 'function') {
    _done = file;
    _file = _jsPath + '*.js';
  } else {
    _file = file;
    _done = done;
  }
  return _stream(_file, function(obj, source) {
    var _distname, _source;
    _source = source;
    _distname = obj.name + (!_isCombo ? '.' + obj.hash.substr(0, _hashLen) : '') + obj.ext;
    _jsMap[obj.base] = {
      hash: obj.hash,
      distname: _distname
    };
    return _buildJs(_distname, _source);
  }, function() {
    return _buildJsMap(_jsMap, function() {
      gutil.log(color.green('Pushed!'));
      return _done();
    });
  });
};

module.exports = pushJs;
