// Generated by CoffeeScript 1.9.1

/*
 * 服务端html模板构建和压缩模块
 */
var _cssMapName, _cssPath, _jsMapName, _jsPath, _mapPath, butil, color, config, errrHandler, evn, fs, getJSONSync, gulp, gutil, htmlPath, htmlSrc, include, isCombo, minhtml, path, plumber;

fs = require('fs');

path = require('path');

gulp = require('gulp');

plumber = require('gulp-plumber');

gutil = require('gulp-util');

config = require('../config');

include = require('./include');

butil = require('./butil');

getJSONSync = butil.getJSONSync;

errrHandler = butil.errrHandler;

color = gutil.colors;

evn = config.evn;

isCombo = config.isCombo;

htmlPath = config.htmlPath;

htmlSrc = config.htmlSrc;

_jsPath = config.jsDistPath;

_cssPath = config.cssDistPath;

_mapPath = config.mapPath;

_jsMapName = config.jsMapName;

_cssMapName = config.cssMapName;

minhtml = function(data) {
  var _name, _path, _soure;
  _path = String(data.path);
  if (_path.indexOf('src/html/_') !== -1) {
    return false;
  }
  _name = _path.split('src/html/')[1];
  _soure = String(data.contents);
  if (evn !== 'dev' && evn !== 'debug') {
    _soure = _soure.replace(/<!--([\s\S]*?)-->/g, '').replace(/\/\*([\s\S]*?)\*\//g, '').replace(/\n/g, '').replace(/\t/g, '').replace(/\r/g, '').replace(/\n\s+/g, ' ').replace(/>([\n\s+]*?)</g, '><');
  }
  return fs.writeFileSync(path.join(htmlPath, _name), _soure, 'utf8');
};

module.exports = function(file) {
  var cssmap, files, hashMaps, jsmap, opts, target;
  files = file || (htmlSrc + "**/*.html");
  jsmap = getJSONSync(path.join(_mapPath, _jsMapName));
  cssmap = getJSONSync(path.join(_mapPath, _cssMapName));
  hashMaps = butil.objMixin(jsmap, cssmap);
  opts = {
    prefix: '@@',
    basepath: '@file',
    evn: evn,
    isCombo: isCombo,
    staticRoot: config.staticRoot,
    staticPaths: {
      css: {
        src: config.cssOutPath,
        dist: config.cssDistPath
      },
      js: {
        src: config.jsOutPath,
        dist: config.jsDistPath
      }
    },
    hashmap: hashMaps,
    context: {
      combo_css: true,
      combo_js: true
    }
  };
  gutil.log(color.yellow("Combine html templates..."));
  return target = gulp.src([files]).pipe(plumber({
    errorHandler: errrHandler
  })).pipe(include(opts)).on("data", function(data) {
    return minhtml(data);
  }).on("end", function() {
    return gutil.log(color.green("Html templates done!"));
  });
};
